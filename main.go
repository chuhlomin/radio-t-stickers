package main

import (
	"bytes"
	"encoding/base64"
	"encoding/csv"
	"flag"
	"image"
	"io"
	"os"
	"strings"
	"text/template"
	"unicode/utf8"

	log "github.com/go-pkgz/lgr"
	"github.com/nfnt/resize"
	"github.com/pkg/errors"

	_ "image/jpeg"
	"image/png"
)

const (
	avatarSizePx = 82 // used to resize avatars from ./img/ directory
	lineCap      = 20 // maximum string length that one line fits before breaking
	lineHeight   = 38 // used to calculate new SVG sizes
)

type Speaker struct {
	Nick         string
	Name         string
	AvatarBase64 string // base64-encoded avatar
	Color        string // color for Name in hex format: #FFFFFF
}

type Sticker struct {
	SpeakerNick string
	Emoji       string

	Speaker Speaker
	Lines   []string
	Sizes   Sizes
}

type Sizes struct {
	CanvasHeight        int
	BackgroundHeight    int
	BalloonHeight       int
	AvatarPositionY     int
	AvatarCircleCenterY int
	Lines               []int
	BackgroundShape     string
	BalloonShape        string
}

var (
	debugPtr = flag.Bool("debug", false, "Enables debug mode")
)

func main() {
	flag.Parse()

	if *debugPtr {
		log.Setup(log.Debug, log.CallerFile, log.CallerFunc, log.Msec, log.LevelBraces)
	} else {
		log.Setup(log.Msec, log.LevelBraces)
	}

	log.Printf("INFO Starting...")

	if err := run(); err != nil {
		log.Fatalf("ERROR %v", err)
	}

	log.Printf("INFO Finished.")
}

func run() error {
	speakers, err := loadSpeakers()
	if err != nil {
		return errors.Wrap(err, "failed to load speakers")
	}

	stickers, err := loadStickers(speakers)
	if err != nil {
		return errors.Wrap(err, "failed to load stickers")
	}

	if err = renderStickers(stickers); err != nil {
		return errors.Wrap(err, "failed to generate stickers")
	}

	return nil
}

func loadSpeakers() (speakers map[string]Speaker, err error) {
	filePath := "speakers.csv"
	colsNum := 4
	speakers = map[string]Speaker{}

	f, err := os.Open(filePath)
	if err != nil {
		return nil, errors.Wrapf(err, "open file %q", filePath)
	}
	defer func() {
		cerr := f.Close()
		if err == nil {
			err = cerr
		}
	}()

	r := csv.NewReader(f)

	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, errors.Wrap(err, "read CSV file")
		}

		if len(record) != colsNum {
			log.Printf("WARN malformed CSV line, expected %d, actual %d", colsNum, len(record))
		}

		path := "./img/" + record[2]
		avatar, err := loadImage(path)
		if err != nil {
			return nil, errors.Wrapf(err, "read avatar %q", path)
		}

		avatarResized := resize.Resize(
			avatarSizePx+1, avatarSizePx+1, // "+1" fixes "too sharp" mask effect on the right side
			avatar, resize.MitchellNetravali,
		)

		avatarBase64, err := encodeImage(avatarResized)
		if err != nil {
			return nil, errors.Wrapf(err, "encode resized image for %q", record[0])
		}

		speakers[record[0]] = Speaker{
			Nick:         record[0],
			Name:         record[1],
			AvatarBase64: avatarBase64,
			Color:        record[3],
		}
	}

	return
}

func loadImage(path string) (im image.Image, err error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer func() {
		cerr := f.Close()
		if err == nil {
			err = cerr
		}
	}()

	im, _, err = image.Decode(f)
	return
}

func encodeImage(im image.Image) (string, error) {
	buf := new(bytes.Buffer)
	err := png.Encode(buf, im)
	if err != nil {
		return "", errors.Wrap(err, "png encode resized image")
	}

	enc := base64.StdEncoding.EncodeToString(buf.Bytes())
	return enc, nil
}

func loadStickers(speakers map[string]Speaker) (stickers []Sticker, err error) {
	filePath := "stickers.csv"
	colsNum := 3

	f, err := os.Open(filePath)
	if err != nil {
		return nil, errors.Wrapf(err, "open file %q", filePath)
	}
	defer func() {
		cerr := f.Close()
		if err == nil {
			err = cerr
		}
	}()

	r := csv.NewReader(f)
	line := 0

	for {
		line++
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, errors.Wrap(err, "read CSV file")
		}

		if len(record) != colsNum {
			log.Printf("WARN malformed CSV line, expected %d, actual %d (line %d)", colsNum, len(record), line)
			continue
		}
		speaker, found := speakers[record[0]]
		if !found {
			log.Printf("WARN cannot find speaker with nick %q (line %d)", record[0], line)
			continue
		}

		lines := splitMessage(record[2])
		if len(lines) > len(backgroundShapes) {
			log.Printf("WARN sticker %q with %d lines cannot be rendered: no background shape", record[1], len(lines))
			continue
		}
		if len(lines) > len(balloonShapes) {
			log.Printf("WARN sticker %q with %d lines cannot be rendered: no balloon shape", record[1], len(lines))
			continue
		}

		stickers = append(stickers, Sticker{
			Speaker: speaker,
			Emoji:   record[1],
			Lines:   lines,
			Sizes:   calculateSizes(len(lines)),
		})
	}

	return
}

func splitMessage(message string) []string {
	lines := []string{}

	words := strings.Split(message, " ")
	var buffer bytes.Buffer
	for _, word := range words {
		if utf8.RuneCountInString(buffer.String()+word) >= lineCap {
			lines = append(lines, cleanLine(buffer.String()))
			buffer.Reset()
		}

		buffer.WriteString(word + " ")
	}

	lines = append(lines, cleanLine(buffer.String()))
	buffer.Reset()

	return lines
}

func cleanLine(line string) string {
	return strings.ReplaceAll(
		strings.TrimRight(line, " "),
		"_",
		" ",
	)
}

var backgroundShapes = []string{
	"M75.3619706,9.5 L436.638029,9.5 C451.595804,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,58.9041956 501,73.8619706 L501,79.1380294 C501,94.0958044 498.35447,105.051214 493.386718,114.340103 C488.418966,123.628991 481.128991,130.918966 471.840103,135.886718 C462.551214,140.85447 451.595804,143.5 436.638029,143.5 L75.3619706,143.5 C60.4041956,143.5 49.4487863,140.85447 40.1598974,135.886718 C30.8710086,130.918966 23.5810342,123.628991 18.6132821,114.340103 C13.6455299,105.051214 11,94.0958044 11,79.1380294 L11,73.8619706 C11,58.9041956 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 60.4041956,9.5 75.3619706,9.5 Z",
	"M82.7055616,9.5 L429.294438,9.5 C453.064523,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,57.4354774 501,81.2055616 L501,109.794438 C501,133.564523 498.35447,143.051214 493.386718,152.340103 C488.418966,161.628991 481.128991,168.918966 471.840103,173.886718 C462.551214,178.85447 453.064523,181.5 429.294438,181.5 L82.7055616,181.5 C58.9354774,181.5 49.4487863,178.85447 40.1598974,173.886718 C30.8710086,168.918966 23.5810342,161.628991 18.6132821,152.340103 C13.6455299,143.051214 11,133.564523 11,109.794438 L11,81.2055616 C11,57.4354774 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 58.9354774,9.5 82.7055616,9.5 Z",
	"M84.0707282,9.5 L427.929272,9.5 C453.337556,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,57.1624441 501,82.5707282 L501,146.429272 C501,171.837556 498.35447,181.051214 493.386718,190.340103 C488.418966,199.628991 481.128991,206.918966 471.840103,211.886718 C462.551214,216.85447 453.337556,219.5 427.929272,219.5 L84.0707282,219.5 C58.6624441,219.5 49.4487863,216.85447 40.1598974,211.886718 C30.8710086,206.918966 23.5810342,199.628991 18.6132821,190.340103 C13.6455299,181.051214 11,171.837556 11,146.429272 L11,82.5707282 C11,57.1624441 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 58.6624441,9.5 84.0707282,9.5 Z",
	"M84.0707282,9.5 L427.929272,9.5 C453.337556,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,57.1624441 501,82.5707282 L501,184.429272 C501,209.837556 498.35447,219.051214 493.386718,228.340103 C488.418966,237.628991 481.128991,244.918966 471.840103,249.886718 C462.551214,254.85447 453.337556,257.5 427.929272,257.5 L84.0707282,257.5 C58.6624441,257.5 49.4487863,254.85447 40.1598974,249.886718 C30.8710086,244.918966 23.5810342,237.628991 18.6132821,228.340103 C13.6455299,219.051214 11,209.837556 11,184.429272 L11,82.5707282 C11,57.1624441 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 58.6624441,9.5 84.0707282,9.5 Z",
	"M84.0707282,9.5 L427.929272,9.5 C453.337556,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,57.1624441 501,82.5707282 L501,222.429272 C501,247.837556 498.35447,257.051214 493.386718,266.340103 C488.418966,275.628991 481.128991,282.918966 471.840103,287.886718 C462.551214,292.85447 453.337556,295.5 427.929272,295.5 L84.0707282,295.5 C58.6624441,295.5 49.4487863,292.85447 40.1598974,287.886718 C30.8710086,282.918966 23.5810342,275.628991 18.6132821,266.340103 C13.6455299,257.051214 11,247.837556 11,222.429272 L11,82.5707282 C11,57.1624441 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 58.6624441,9.5 84.0707282,9.5 Z",
	"M84.0707282,9.5 L427.929272,9.5 C453.337556,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,57.1624441 501,82.5707282 L501,222.429272 C501,247.837556 498.35447,257.051214 493.386718,266.340103 C488.418966,275.628991 481.128991,282.918966 471.840103,287.886718 C462.551214,292.85447 453.337556,295.5 427.929272,295.5 L84.0707282,295.5 C58.6624441,295.5 49.4487863,292.85447 40.1598974,287.886718 C30.8710086,282.918966 23.5810342,275.628991 18.6132821,266.340103 C13.6455299,257.051214 11,247.837556 11,222.429272 L11,82.5707282 C11,57.1624441 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 58.6624441,9.5 84.0707282,9.5 Z",
	"M84.0707282,9.5 L427.929272,9.5 C453.337556,9.5 462.551214,12.1455299 471.840103,17.1132821 C481.128991,22.0810342 488.418966,29.3710086 493.386718,38.6598974 C498.35447,47.9487863 501,57.1624441 501,82.5707282 L501,260.429272 C501,285.837556 498.35447,295.051214 493.386718,304.340103 C488.418966,313.628991 481.128991,320.918966 471.840103,325.886718 C462.551214,330.85447 453.337556,333.5 427.929272,333.5 L84.0707282,333.5 C58.6624441,333.5 49.4487863,330.85447 40.1598974,325.886718 C30.8710086,320.918966 23.5810342,313.628991 18.6132821,304.340103 C13.6455299,295.051214 11,285.837556 11,260.429272 L11,82.5707282 C11,57.1624441 13.6455299,47.9487863 18.6132821,38.6598974 C23.5810342,29.3710086 30.8710086,22.0810342 40.1598974,17.1132821 C49.4487863,12.1455299 58.6624441,9.5 84.0707282,9.5 Z",
}

var balloonShapes = []string{
	"M437.294466,27.5 C449.638237,27.5 457.018396,29.3565122 463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,61.8617633 484,74.2055335 L484,82.7944665 C484,95.1382367 482.143488,102.518396 478.657346,109.036914 C475.171204,115.555433 470.055433,120.671204 463.536914,124.157346 C457.018396,127.643488 449.638237,129.5 437.294466,129.5 L177.231849,129.5 C164.888079,129.5 157.50792,127.643488 150.989402,124.157346 C149.747211,123.493015 148.555961,122.769505 147.41722,121.988387 C140.874569,125.939304 131.40186,128.443376 119,129.5 C126.684211,125.921053 130.526316,122.342105 130.526316,118.763158 L130.526316,88.4384364 L130.677043,88.5197204 C130.576898,86.7342424 130.526316,84.8319737 130.526316,82.7944665 L130.526316,74.2055335 C130.526316,61.8617633 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.50792,29.3565122 164.888079,27.5 177.231849,27.5 L437.294466,27.5 Z",
	"M463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,60.9473292 484,78.777704 L484,115.222296 C484,133.052671 482.143488,139.518396 478.657346,146.036914 C475.171204,152.555433 470.055433,157.671204 463.536914,161.157346 C457.018396,164.643488 450.552671,166.5 432.722296,166.5 L181.80402,166.5 C163.973645,166.5 157.50792,164.643488 150.989402,161.157346 C149.747211,160.493015 148.555961,159.769505 147.41722,158.988387 C140.874569,162.939304 131.40186,165.443376 119,166.5 C126.684211,162.921053 130.526316,159.342105 130.526316,155.763158 L130.526316,125.438436 L130.80097,125.585278 C130.618707,122.612019 130.526316,119.199943 130.526316,115.222296 L130.526316,78.777704 C130.526316,60.9473292 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.431232,29.3975257 163.821503,27.5439082 181.179413,27.5007705 L432.722296,27.5 C450.552671,27.5 457.018396,29.3565122 463.536914,32.8426541 Z",
	"M463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,60.9473292 484,78.777704 L484,151.222296 C484,169.052671 482.143488,175.518396 478.657346,182.036914 C475.171204,188.555433 470.055433,193.671204 463.536914,197.157346 C457.018396,200.643488 450.552671,202.5 432.722296,202.5 L181.80402,202.5 C163.973645,202.5 157.50792,200.643488 150.989402,197.157346 C149.747211,196.493015 148.555961,195.769505 147.41722,194.988387 C140.874569,198.939304 131.40186,201.443376 119,202.5 C126.684211,198.921053 130.526316,195.342105 130.526316,191.763158 L130.526316,161.438436 L130.80097,161.585278 C130.618707,158.612019 130.526316,155.199943 130.526316,151.222296 L130.526316,78.777704 C130.526316,60.9473292 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.431232,29.3975257 163.821503,27.5439082 181.179413,27.5007705 L432.722296,27.5 C450.552671,27.5 457.018396,29.3565122 463.536914,32.8426541 Z",
	"M463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,60.9473292 484,78.777704 L484,189.222296 C484,207.052671 482.143488,213.518396 478.657346,220.036914 C475.171204,226.555433 470.055433,231.671204 463.536914,235.157346 C457.018396,238.643488 450.552671,240.5 432.722296,240.5 L181.80402,240.5 C163.973645,240.5 157.50792,238.643488 150.989402,235.157346 C149.747211,234.493015 148.555961,233.769505 147.41722,232.988387 C140.874569,236.939304 131.40186,239.443376 119,240.5 C126.684211,236.921053 130.526316,233.342105 130.526316,229.763158 L130.526316,199.438436 L130.80097,199.585278 C130.618707,196.612019 130.526316,193.199943 130.526316,189.222296 L130.526316,78.777704 C130.526316,60.9473292 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.431232,29.3975257 163.821503,27.5439082 181.179413,27.5007705 L432.722296,27.5 C450.552671,27.5 457.018396,29.3565122 463.536914,32.8426541 Z",
	"M463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,60.9473292 484,78.777704 L484,227.222296 C484,245.052671 482.143488,251.518396 478.657346,258.036914 C475.171204,264.555433 470.055433,269.671204 463.536914,273.157346 C457.018396,276.643488 450.552671,278.5 432.722296,278.5 L181.80402,278.5 C163.973645,278.5 157.50792,276.643488 150.989402,273.157346 C149.747211,272.493015 148.555961,271.769505 147.41722,270.988387 C140.874569,274.939304 131.40186,277.443376 119,278.5 C126.684211,274.921053 130.526316,271.342105 130.526316,267.763158 L130.526316,237.438436 L130.80097,237.585278 C130.618707,234.612019 130.526316,231.199943 130.526316,227.222296 L130.526316,78.777704 C130.526316,60.9473292 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.431232,29.3975257 163.821503,27.5439082 181.179413,27.5007705 L432.722296,27.5 C450.552671,27.5 457.018396,29.3565122 463.536914,32.8426541 Z",
	"M463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,60.9473292 484,78.777704 L484,227.222296 C484,245.052671 482.143488,251.518396 478.657346,258.036914 C475.171204,264.555433 470.055433,269.671204 463.536914,273.157346 C457.018396,276.643488 450.552671,278.5 432.722296,278.5 L181.80402,278.5 C163.973645,278.5 157.50792,276.643488 150.989402,273.157346 C149.747211,272.493015 148.555961,271.769505 147.41722,270.988387 C140.874569,274.939304 131.40186,277.443376 119,278.5 C126.684211,274.921053 130.526316,271.342105 130.526316,267.763158 L130.526316,237.438436 L130.80097,237.585278 C130.618707,234.612019 130.526316,231.199943 130.526316,227.222296 L130.526316,78.777704 C130.526316,60.9473292 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.431232,29.3975257 163.821503,27.5439082 181.179413,27.5007705 L432.722296,27.5 C450.552671,27.5 457.018396,29.3565122 463.536914,32.8426541 Z",
	"M463.536914,32.8426541 C470.055433,36.3287959 475.171204,41.4445674 478.657346,47.9630859 C482.143488,54.4816044 484,60.9473292 484,78.777704 L484,265.222296 C484,283.052671 482.143488,289.518396 478.657346,296.036914 C475.171204,302.555433 470.055433,307.671204 463.536914,311.157346 C457.018396,314.643488 450.552671,316.5 432.722296,316.5 L181.80402,316.5 C163.973645,316.5 157.50792,314.643488 150.989402,311.157346 C149.747211,310.493015 148.555961,309.769505 147.41722,308.988387 C140.874569,312.939304 131.40186,315.443376 119,316.5 C126.684211,312.921053 130.526316,309.342105 130.526316,305.763158 L130.526316,275.438436 L130.80097,275.585278 C130.618707,272.612019 130.526316,269.199943 130.526316,265.222296 L130.526316,78.777704 C130.526316,60.9473292 132.382828,54.4816044 135.86897,47.9630859 C139.355112,41.4445674 144.470883,36.3287959 150.989402,32.8426541 C157.431232,29.3975257 163.821503,27.5439082 181.179413,27.5007705 L432.722296,27.5 C450.552671,27.5 457.018396,29.3565122 463.536914,32.8426541 Z",
}

func calculateSizes(numberOfLines int) Sizes {
	sizes := Sizes{
		CanvasHeight:        154,
		BackgroundHeight:    134,
		BalloonHeight:       99,
		AvatarPositionY:     52,
		AvatarCircleCenterY: 93,
		Lines:               []int{107},
		BackgroundShape:     backgroundShapes[numberOfLines-1],
		BalloonShape:        balloonShapes[numberOfLines-1],
	}

	if numberOfLines > 1 {
		diff := lineHeight * (numberOfLines - 1)

		sizes.CanvasHeight += diff
		sizes.BackgroundHeight += diff
		sizes.BalloonHeight += diff
		sizes.AvatarCircleCenterY += diff
		sizes.AvatarPositionY += diff

		for i := 1; i < numberOfLines; i++ {
			sizes.Lines = append(sizes.Lines, 107+lineHeight*i)
		}
	}

	return sizes
}

func renderStickers(stickers []Sticker) error {
	template, err := loadTemplate()
	if err != nil {
		return errors.Wrap(err, "load template")
	}

	for _, sticker := range stickers {
		if err := renderSticker(template, sticker); err != nil {
			return errors.Wrapf(err, "render sticker %+v", sticker)
		}
	}
	return nil
}

func loadTemplate() (*template.Template, error) {
	svg := `{{ $lc := len .Lines -}}
<?xml version="1.0" encoding="UTF-8"?>
<svg width="512px" height="{{ .Sizes.CanvasHeight }}px" viewBox="0 0 512 {{ .Sizes.CanvasHeight }}" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
	<title>{{ .Emoji }}</title>
	<g id="sticker" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
		<path id="background" fill="#FFFFFF" d="{{ .Sizes.BackgroundShape }}"></path>
        <path id="balloon" stroke="#EBEBEB" fill="#F4F4F4" d="{{ .Sizes.BalloonShape }}"></path>
		<text id="message" font-family="SFUIDisplay-Regular, SF UI Display" font-size="30" font-weight="normal" letter-spacing="0.5" fill="#000000">
			{{ range $i, $line := .Lines }}
			<tspan x="159" y="{{ index $.Sizes.Lines $i }}">{{ $line }}</tspan>
			{{ end }}
		</text>
		<text id="name" font-family="SFUIDisplay-Semibold, SF UI Display" font-size="30" font-weight="500" letter-spacing="0.5" fill="{{ .Speaker.Color }}">
			<tspan x="159" y="70">{{ .Speaker.Name }}</tspan>
		</text>
		<defs><circle id="path" cx="63" cy="{{ .Sizes.AvatarCircleCenterY }}" r="41"></circle></defs>
		<mask id="mask" fill="white"><use xlink:href="#path"></use></mask>
		<use id="oval" fill="white" xlink:href="#path"></use>
		<image id="avatar" mask="url(#mask)" x="22" y="{{ .Sizes.AvatarPositionY }}" width="82" height="82" xlink:href="data:image/png;base64,{{ .Speaker.AvatarBase64 }}"></image>
	</g>
</svg>`

	t, err := template.New("sticker").Parse(svg)
	if err != nil {
		return nil, errors.Wrap(err, "parse SVG template")
	}

	return t, nil
}

func renderSticker(template *template.Template, sticker Sticker) (err error) {
	path := "./out/" + sticker.Emoji + ".svg"
	f, err := os.Create(path)
	if err != nil {
		return errors.Wrapf(err, "create file %q", path)
	}
	defer func() {
		cerr := f.Close()
		if err == nil {
			err = cerr
		}
	}()

	err = template.Execute(f, sticker)
	if err != nil {
		return errors.Wrap(err, "template execution")
	}
	return nil
}
